# nginx reverse proxy + basic CORS handling for API gateway
# upstream: docker-compose에서 정의한 gateway-server 인스턴스들을 대상으로 함
upstream gateway_backend {
    least_conn;
    server gateway-server-1:8080;
    server gateway-server-2:8080;
    server gateway-server-3:8080;
}

server {
    listen 80;
    server_name _;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nㅈginx/error.log;

    # 정적 파일 제공: 캐시와 최소한의 CORS 헤더만 추가
    location /static/ {
        alias /usr/share/nginx/html/static/;
        expires 1d;
        add_header Cache-Control "public";
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, Accept, Content-Type" always;
    }

    # 프리플라이트(OPTIONS) 응답을 nginx 레벨에서 빠르게 처리
    location / {
        # OPTIONS(프리플라이트)는 프록시로 전달하지 않고 204로 응답
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, X-Requested-With" always;
            # production에서 credentials를 허용하려면 '*' 대신 명시적 origin을 사용하세요
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age 3600 always;
            return 204;
        }

        # 프록시 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_buffering on;
        proxy_buffers 16 16k;
        proxy_buffer_size 32k;

        # 백엔드 응답에 CORS 헤더를 추가 (백엔드에서 헤더를 설정하지 않은 경우)
        # 백엔드가 이미 헤더를 설정하면 proxy_hide_header로 덮어쓸 수 있음
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;

        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Max-Age 3600 always;

        proxy_pass http://gateway_backend;
    }

    # 헬스체크 프록시
    location = /health {
        proxy_pass http://gateway_backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout 2s;
        proxy_read_timeout 2s;

        add_header Access-Control-Allow-Origin "*" always;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
